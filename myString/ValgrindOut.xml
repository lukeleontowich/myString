<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: /home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</line>
</preamble>

<pid>17041</pid>
<ppid>13365</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--leak-check=full</arg>
    <arg>--track-origins=yes</arg>
    <arg>--xml=yes</arg>
    <arg>--xml-file=/home/lukeleontowich/Documents/Summer2021/myString/myString/ValgrindOut.xml</arg>
  </vargv>
  <argv>
    <exe>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</exe>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.048 </time>
</status>

<error>
  <unique>0x0</unique>
  <tid>1</tid>
  <kind>InvalidRead</kind>
  <what>Invalid read of size 1</what>
  <stack>
    <frame>
      <ip>0x1109D8</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::myString(luke::myString const&amp;)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x1117F9</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::insert(unsigned short, luke::myString const&amp;)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>291</line>
    </frame>
    <frame>
      <ip>0x117746</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert1_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>203</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
  <auxwhat>Address 0x4ef3c17 is 0 bytes after a block of size 7 alloc'd</auxwhat>
  <stack>
    <frame>
      <ip>0x483D583</ip>
      <obj>/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new[](unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x110830</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::myString(char const*)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>21</line>
    </frame>
    <frame>
      <ip>0x11771E</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert1_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>201</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x8</unique>
  <tid>1</tid>
  <kind>InvalidWrite</kind>
  <what>Invalid write of size 1</what>
  <stack>
    <frame>
      <ip>0x111926</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::insert(unsigned short, luke::myString const&amp;)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>310</line>
    </frame>
    <frame>
      <ip>0x117746</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert1_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>203</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x11FD8D</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>RUN_ALL_TESTS()</fn>
      <dir>/usr/include/gtest</dir>
      <file>gtest.h</file>
      <line>2473</line>
    </frame>
  </stack>
  <auxwhat>Address 0x4ef3d0f is 0 bytes after a block of size 15 alloc'd</auxwhat>
  <stack>
    <frame>
      <ip>0x483D583</ip>
      <obj>/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new[](unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x11184C</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::insert(unsigned short, luke::myString const&amp;)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>295</line>
    </frame>
    <frame>
      <ip>0x117746</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert1_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>203</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x10</unique>
  <tid>1</tid>
  <kind>InvalidWrite</kind>
  <what>Invalid write of size 1</what>
  <stack>
    <frame>
      <ip>0x111926</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::insert(unsigned short, luke::myString const&amp;)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>310</line>
    </frame>
    <frame>
      <ip>0x117AE4</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert1_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>212</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x11FD8D</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>RUN_ALL_TESTS()</fn>
      <dir>/usr/include/gtest</dir>
      <file>gtest.h</file>
      <line>2473</line>
    </frame>
  </stack>
  <auxwhat>Address 0x4ef3eb4 is 0 bytes after a block of size 20 alloc'd</auxwhat>
  <stack>
    <frame>
      <ip>0x483D583</ip>
      <obj>/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new[](unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x110F96</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::reserve(unsigned short)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>147</line>
    </frame>
    <frame>
      <ip>0x117ABC</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert1_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>210</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x13</unique>
  <tid>1</tid>
  <kind>InvalidRead</kind>
  <what>Invalid read of size 1</what>
  <stack>
    <frame>
      <ip>0x1109D8</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::myString(luke::myString const&amp;)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>45</line>
    </frame>
    <frame>
      <ip>0x111A3C</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::insert(unsigned short, char const*)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>324</line>
    </frame>
    <frame>
      <ip>0x1180C2</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert2_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>220</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
  <auxwhat>Address 0x4ef42bc is 0 bytes after a block of size 12 alloc'd</auxwhat>
  <stack>
    <frame>
      <ip>0x483D583</ip>
      <obj>/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new[](unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x110830</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::myString(char const*)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>21</line>
    </frame>
    <frame>
      <ip>0x1180AA</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert2_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>219</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x20</unique>
  <tid>1</tid>
  <kind>InvalidWrite</kind>
  <what>Invalid write of size 1</what>
  <stack>
    <frame>
      <ip>0x111B56</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::insert(unsigned short, char const*)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>343</line>
    </frame>
    <frame>
      <ip>0x1180C2</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert2_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>220</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x11FD8D</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>RUN_ALL_TESTS()</fn>
      <dir>/usr/include/gtest</dir>
      <file>gtest.h</file>
      <line>2473</line>
    </frame>
  </stack>
  <auxwhat>Address 0x4ef4379 is 0 bytes after a block of size 25 alloc'd</auxwhat>
  <stack>
    <frame>
      <ip>0x483D583</ip>
      <obj>/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new[](unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x111A8F</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::insert(unsigned short, char const*)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>328</line>
    </frame>
    <frame>
      <ip>0x1180C2</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert2_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>220</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x2d</unique>
  <tid>1</tid>
  <kind>InvalidWrite</kind>
  <what>Invalid write of size 1</what>
  <stack>
    <frame>
      <ip>0x111B56</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::insert(unsigned short, char const*)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>343</line>
    </frame>
    <frame>
      <ip>0x118433</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert2_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>229</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x11FD8D</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>RUN_ALL_TESTS()</fn>
      <dir>/usr/include/gtest</dir>
      <file>gtest.h</file>
      <line>2473</line>
    </frame>
  </stack>
  <auxwhat>Address 0x4ef452e is 0 bytes after a block of size 30 alloc'd</auxwhat>
  <stack>
    <frame>
      <ip>0x483D583</ip>
      <obj>/usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator new[](unsigned long)</fn>
    </frame>
    <frame>
      <ip>0x110F96</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>luke::myString::reserve(unsigned short)</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString/src</dir>
      <file>myString.cpp</file>
      <line>147</line>
    </frame>
    <frame>
      <ip>0x118408</ip>
      <obj>/home/lukeleontowich/Documents/Summer2021/myString/myString/bin/Debug/myString</obj>
      <fn>testMyString_testInsert2_Test::TestBody()</fn>
      <dir>/home/lukeleontowich/Documents/Summer2021/myString/myString</dir>
      <file>test.cpp</file>
      <line>227</line>
    </frame>
    <frame>
      <ip>0x4928A98</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49211B0</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x48FB555</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FBF40</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x48FC698</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::TestSuite::Run()</fn>
    </frame>
    <frame>
      <ip>0x4908842</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x4929FC1</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x49223EE</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x490704C</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libgtest.so</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>


<status>
  <state>FINISHED</state>
  <time>00:00:00:01.242 </time>
</status>

<errorcounts>
  <pair>
    <count>8</count>
    <unique>0x2d</unique>
  </pair>
  <pair>
    <count>13</count>
    <unique>0x20</unique>
  </pair>
  <pair>
    <count>13</count>
    <unique>0x13</unique>
  </pair>
  <pair>
    <count>3</count>
    <unique>0x10</unique>
  </pair>
  <pair>
    <count>8</count>
    <unique>0x8</unique>
  </pair>
  <pair>
    <count>8</count>
    <unique>0x0</unique>
  </pair>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

